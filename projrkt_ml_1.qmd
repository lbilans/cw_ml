---
title: "projekt_ml_1"
author: "Łukasz Bilański"
format: 
  html:
    self-contained: true
    embed-resources: true
    toc: true
    toc-depth: 4
    toc-location: right
    toc-title: "Spis treści"
    number-sections: true
    number-depth: 4
    code-fold: show
    code-summary: "Show the code"
    code-tools: true
    code-block-bg: true
    code-block-border-left: "black"
    code-line-numbers: false
    code-copy: true
    html-math-method: katex
    smooth-scroll: true
    anchor-sections: true
    link-external-icon: true
    link-external-newwindow: true
    theme:
        light: cosmo
        dark: darkly
    fontsize: 1.0em
    linestretch: 1.5
execute:
  warning: false
  echo: true
  error: false
---

##Potrzebne biblioteki

```{r}
#| echo: false
library(tidymodels)
library(parsnip)
library(dplyr)
# Helper packages
library(readr)# import danych
library(broom.mixed) # konwersja 
library(dotwhisker)  # wizualizacja
library(GGally) # wizualizacja
```


##Dane urchins data

```{r}
urchins <-
  read_csv("https://tidymodels.org/start/models/urchins.csv") %>% 
  setNames(c("food_regime", "initial_volume", "width")) %>% 
  mutate(food_regime = factor(food_regime, 
                              levels = c("Initial", "Low", "High")))
```


##Sprawdzanie braku danych

```{r}
urchins |> is.na() |> as_tibble() |> summarise_all(sum)
```


```{r}
urchins %>%
  ggplot(aes(
    x = initial_volume,
    y = width,
    col = food_regime,
    group = food_regime
  )) +
  geom_point() +
  geom_smooth(method = lm, se = F) +
  scale_color_viridis_d(option = "C", end = .9)
```



##Dopasowanie modelu
```{r}
width ~ initial_volume * food_regime
```

```{r}
linear_reg()
```

```{r}
lm_mod <- 
  linear_reg() |> 
  set_engine("lm")
```

```{r}
lm_fit <-  
  lm_mod |>
  fit(width ~ initial_volume * food_regime, data = urchins)
lm_fit  
```

```{r}
print(lm_fit, digits = 5)
```

```{r}
lm_fit$fit |> summary()
```

```{r}
lm_fit |> tidy()
```

```{r}
lm_fit |> tidy(conf.int = T)
```


```{r}
lm_fit |> 
  tidy() |> 
  dwplot(vline = geom_vline(xintercept = 0, color = "grey50", linetype = 2), 
         dot_args = list(size = 2, color = "black"), 
         whisker_args = list(color = "black")) +
  theme_bw()
```

##Prognozowanie

```{r}
new_points <- expand.grid(initial_volume = seq(5,45,5), 
                          food_regime = c("Initial", "Low", "High"))
```


```{r}
# Prognoza średniej wartości
mean_pred <- predict(object = lm_fit, new_data = new_points)

# Prognoza przedizału ufności
conf_pred <- predict(object = lm_fit, new_data = new_points, type = "conf_int")

# Łączenie danych
lm_pred <- 
  new_points |> 
  bind_cols(mean_pred) |> 
  bind_cols(conf_pred)

# WYkres danych

lm_pred |>
  ggplot(aes(x = food_regime,
             y = .pred)) +
  geom_point() +
  geom_errorbar(aes(ymin = .pred_lower,
                    ymax = .pred_upper),
                width = 0.2) +
  facet_wrap(~ initial_volume) +
  theme_bw() +
  labs(y = "urchni size")
```


## Inne metody estymacji modelu

```{r}
prior_dist <- rstanarm::student_t(df = 1)

set.seed(123)

# Ustawiamy metodę estymacji za pomocą parsnip

bayes_mod <-
  linear_reg() |>
  set_engine(engine = "stan",
             prior_intercept = prior_dist,
             prior = prior_dist)

# Estymacja modelu

bayes_fit <- 
  bayes_mod |> 
  fit(width ~ initial_volume * food_regime, data = urchins)
```

```{r}
bayes_fit$fit #za mała dokąłdność
```

```{r}
bayes_fit |> print(digits = 4)
```

```{r}
bayes_fit |> tidy(conf.int = T)
```

```{r}
bayes_pred <- 
new_points |> 
  bind_cols(predict(bayes_fit, new_data = new_points)) |> 
  bind_cols(predict(bayes_fit, new_data = new_points, type = "conf_int"))
```

```{r}
bayes_pred |>
  ggplot(aes(x = food_regime,
             y = .pred)) +
  geom_point() +
  geom_errorbar(aes(ymin = .pred_lower,
                    ymax = .pred_upper),
                width = 0.2) +
  facet_wrap(~ initial_volume) +
  theme_bw() +
  labs(y = "urchni size")
```

```{r}
ggplot(urchins,
       aes(initial_volume, width)) +      # returns a ggplot object 
  geom_jitter() +                         # same
  geom_smooth(method = lm, se = FALSE) +  # same                    
  labs(x = "Volume", y = "Width")         # etc
```


## ćwiczenie nr 1

```{r}

colnames(airquality) <- tolower(colnames(airquality))

air <-
  airquality |>
  as_tibble() |>
  na.omit() |> 
  select(-day) |> 
  mutate(month = factor(month)) 
```

```{r}
ggpairs(air)
```


```{r}
# Definicja modelu liniowego
lm_mod <- linear_reg() |>  
  set_engine("lm")

# Dopasowanie modelu (bez interakcji i bez Day)
lm_fit <- 
  lm_mod |> 
  fit(ozone ~ solar.r + wind + temp + month, 
      data = air)
lm_fit
```
```{r}
print(lm_fit, digits = 5)
```
```{r}
lm_fit$fit |> summary()
```

```{r}
lm_fit |> tidy()
```

```{r}
lm_fit |> tidy(conf.int = T)
```

```{r}
lm_fit |> 
  tidy() |> 
  dwplot(vline = geom_vline(xintercept = 0, color = "grey50", linetype = 2), 
         dot_args = list(size = 2, color = "black"), 
         whisker_args = list(color = "black")) +
  theme_bw()
```
Zmienna wind oraz temp mają znaczący wpływ na zmienną ozone, natomiast solar.r nie ma znaczącego wpływu.


```{r}
# Dodanie danych testowych
new_dane <- 
  data.frame(solar.r = seq(100, 300, 50), 
              wind = seq(0, 20, 5), 
              temp = seq(60, 100, 10), 
              month = factor(c("5", "6", "7", "8", "9")))
```


```{r}
# Prognoza średniej wartości
mean_pred <- predict(object = lm_fit, new_data = new_dane)
# Prognoza przedizału ufności
conf_pred <- predict(object = lm_fit, new_data = new_dane, type = "conf_int")
# Łączenie danych
air_lm_pred <- 
  new_dane |> 
  bind_cols(mean_pred) |> 
  bind_cols(conf_pred)
```

Wykres prognoz dla zmiennej ozone
```{r}
air_lm_pred |>
  ggplot(aes(x = month,
             y = .pred)) +
  geom_point() +
  geom_errorbar(aes(ymin = .pred_lower,
                    ymax = .pred_upper),
                width = 0.2) +
  theme_bw() +
  labs(y = "ozone")
```





























